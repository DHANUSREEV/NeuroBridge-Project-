// src/pages/Results.tsx - FINAL VERSION
import React from "react";
import { motion } from "framer-motion";
import { useLocation, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, Trophy, CheckCircle, XCircle, Download, Sparkles } from "lucide-react";

export default function Results() {
  const location = useLocation();
  const navigate = useNavigate();
  const results = location.state;

  if (!results) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="p-8 text-center max-w-md">
          <h2 className="text-2xl font-bold mb-4">No Results Found</h2>
          <p className="text-muted-foreground mb-6">Please complete a quiz first</p>
          <Button onClick={() => navigate('/quiz')}>Go to Quiz</Button>
        </Card>
      </div>
    );
  }

  const { domain, score, totalQuestions, percentage, questions, answers, aiFeedback } = results;

  const downloadResults = () => {
    const content = `
QUIZ RESULTS - ${domain.name}
Generated: ${new Date().toLocaleString()}
Score: ${score}/${totalQuestions} (${percentage}%)

${'='.repeat(60)}

${questions.map((q: any, i: number) => `
Question ${i + 1}: ${q.question}

Your Answer: ${q.options[answers[i]]}
Correct Answer: ${q.options[q.correctAnswer]}
Status: ${q.correctAnswer === answers[i] ? '✓ CORRECT' : '✗ INCORRECT'}

${q.explanation ? `Explanation: ${q.explanation}` : ''}
${'-'.repeat(60)}
`).join('\n')}

GPT-4 AI FEEDBACK:
${aiFeedback || 'Great effort! Keep learning.'}

${'='.repeat(60)}
Generated by NeuroBridge Quiz System with GPT-4
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `quiz-results-${domain.name.replace(/\s+/g, '-')}-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-card/30">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <Button
            variant="ghost"
            onClick={() => navigate(-1)}
            className="mb-6 flex items-center gap-2"
          >
            <ArrowLeft size={16} /> Back
          </Button>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center mb-8"
          >
            <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-primary/10 mb-4">
              <Trophy className="h-10 w-10 text-primary" />
            </div>
            <h1 className="text-4xl font-bold mb-2">Quiz Results</h1>
            <p className="text-xl text-muted-foreground">{domain.name}</p>
          </motion.div>

          <Card className="p-8 mb-6 shadow-lg">
            <div className="grid grid-cols-3 gap-4 mb-8">
              <div className="text-center p-4 bg-primary/5 rounded-lg">
                <p className="text-3xl font-bold text-primary">{score}</p>
                <p className="text-sm text-muted-foreground">Correct</p>
              </div>
              <div className="text-center p-4 bg-primary/5 rounded-lg">
                <p className="text-3xl font-bold text-primary">{totalQuestions}</p>
                <p className="text-sm text-muted-foreground">Total</p>
              </div>
              <div className="text-center p-4 bg-primary/5 rounded-lg">
                <p className="text-3xl font-bold text-primary">{percentage}%</p>
                <p className="text-sm text-muted-foreground">Score</p>
              </div>
            </div>

            {aiFeedback && (
              <div className="mb-6 p-6 bg-gradient-to-br from-primary/5 to-primary/10 rounded-lg border border-primary/20">
                <div className="flex items-start gap-3">
                  <Sparkles className="h-5 w-5 text-primary mt-1" />
                  <div>
                    <h3 className="font-semibold mb-2">GPT-4 AI Feedback</h3>
                    <p className="text-muted-foreground">{aiFeedback}</p>
                  </div>
                </div>
              </div>
            )}

            <div className="space-y-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-semibold text-lg">Detailed Review</h3>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={downloadResults}
                  className="gap-2"
                >
                  <Download className="h-4 w-4" />
                  Download
                </Button>
              </div>

              {questions.map((question: any, index: number) => {
                const isCorrect = question.correctAnswer === answers[index];
                return (
                  <Card
                    key={index}
                    className={`p-4 ${
                      isCorrect
                        ? 'border-green-500/50 bg-green-500/5'
                        : 'border-red-500/50 bg-red-500/5'
                    }`}
                  >
                    <div className="flex items-start gap-3">
                      <div
                        className={`w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 ${
                          isCorrect ? 'bg-green-500' : 'bg-red-500'
                        }`}
                      >
                        {isCorrect ? (
                          <CheckCircle className="h-4 w-4 text-white" />
                        ) : (
                          <XCircle className="h-4 w-4 text-white" />
                        )}
                      </div>
                      <div className="flex-1">
                        <p className="font-medium mb-2">
                          {index + 1}. {question.question}
                        </p>
                        <div className="text-sm space-y-1">
                          <p>
                            Your answer:{' '}
                            <span
                              className={
                                isCorrect
                                  ? 'text-green-600 font-medium'
                                  : 'text-red-600 font-medium'
                              }
                            >
                              {question.options[answers[index]]}
                            </span>
                          </p>
                          {!isCorrect && (
                            <p>
                              Correct answer:{' '}
                              <span className="text-green-600 font-medium">
                                {question.options[question.correctAnswer]}
                              </span>
                            </p>
                          )}
                          {question.explanation && (
                            <p className="text-muted-foreground mt-2 pt-2 border-t">
                              <span className="font-medium">Explanation:</span>{' '}
                              {question.explanation}
                            </p>
                          )}
                        </div>
                      </div>
                    </div>
                  </Card>
                );
              })}
            </div>
          </Card>

          <div className="flex gap-4 justify-center flex-wrap">
            <Button
              size="lg"
              onClick={() => navigate('/quiz')}
              variant="outline"
            >
              Take Another Quiz
            </Button>
            <Button
              size="lg"
              onClick={() => navigate('/dashboard')}
              className="gap-2"
            >
              <Trophy className="h-4 w-4" />
              View Dashboard
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}